<!-- app/views/home/index.html.erb -->
<h1>채팅방</h1>

<% if current_user %>
  <p><strong><%= current_user.email %></strong> 님, 온라인입니다.</p>
<% else %>
  <p>로그인 해주세요.</p>
<% end %>

<div style="display: flex; margin-top: 20px;">
  <!-- 온라인 사용자 목록 영역 -->
  <div style="width: 25%; border-right: 1px solid #ccc; padding: 10px;">
    <h2>온라인 사용자</h2>
    <ul id="online-users">
      <!-- 서버에서 full_update 메시지 수신 시 목록이 여기 구성됩니다. -->
    </ul>
  </div>

  <!-- 채팅 메시지 영역 -->
  <div style="width: 75%; padding: 10px;">
    <div id="messages" style="border:1px solid #ccc; padding:10px; height:300px; overflow:auto;">
      <!-- 채팅 메시지가 이곳에 표시됩니다. -->
    </div>

    <form id="message_form" style="margin-top: 10px;">
      <input type="text" id="message_input" placeholder="메시지를 입력하세요" style="width:80%;">
      <button type="submit">전송</button>
    </form>
  </div>
</div>

<!-- 채팅 메시지 전송 관련 JavaScript -->
<script>
document.addEventListener("turbolinks:load", () => {
  console.log("turbolinks:load 이벤트 발생 - 채팅 및 온라인 상태 업데이트 페이지 로드 완료");

  // 채팅 메시지 전송 처리
  const form = document.getElementById("message_form");
  const input = document.getElementById("message_input");
  if (form && input && window.chatChannel) {
    form.addEventListener("submit", (event) => {
      event.preventDefault();
      const message = input.value;
      if (message.trim() === "") return;
      window.chatChannel.speak(message);
      input.value = "";
    });
  } else {
    console.error("chatChannel 객체를 찾을 수 없거나, 메시지 폼/입력 요소가 존재하지 않습니다.");
  }
});
</script>

<!-- 온라인 사용자 업데이트 관련 JavaScript (PresenceChannel full_update 및 개별 업데이트 처리) -->
<script>
if (window.presenceChannel) {
  window.presenceChannel.received = function(data) {
    console.log("Presence update:", data);
    const onlineUsersEl = document.getElementById("online-users");
    if (!onlineUsersEl) {
      console.error("online-users 요소를 찾을 수 없습니다.");
      return;
    }
    if (data.type === "full_update") {
      // 전체 온라인 사용자 목록을 새로 구성
      onlineUsersEl.innerHTML = "";
      data.users.forEach(user => {
        const li = document.createElement("li");
        li.textContent = user;
        li.id = "user-" + user; // 예: "user-1@1"
        onlineUsersEl.appendChild(li);
      });
    } else if (data.type === "update") {
      if (data.status === "online") {
        if (!document.getElementById("user-" + data.user)) {
          const li = document.createElement("li");
          li.textContent = data.user;
          li.id = "user-" + data.user;
          onlineUsersEl.appendChild(li);
        }
      } else if (data.status === "offline") {
        const userEl = document.getElementById("user-" + data.user);
        if (userEl) {
          userEl.remove();
        }
      }
    }
  };
}
</script>
